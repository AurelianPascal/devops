Step 1: Create a New Spring Boot Project
You can use Spring Initializr to bootstrap your project:

Go to Spring Initializr.

Choose the following options:

Project: Maven Project
Language: Java
Spring Boot: 3.x.x (or the latest stable version)
Group: com.example
Artifact: cosmosdb-demo
Name: cosmosdb-demo
Packaging: Jar
Java: 17 (or your preferred version)
Add the following dependencies:

Spring Web
Spring Data CosmosDB (This is not directly available in Initializr, so we will add it manually later)
Lombok (Optional for reducing boilerplate code)
Click "Generate" to download the project, then unzip it and open it in your favorite IDE (like IntelliJ IDEA or Eclipse).

Step 2: Add Cosmos DB Dependency
The Azure Spring Data Cosmos DB dependency isn't available directly through Spring Initializr, so you'll need to add it manually to your pom.xml:

xml
Copy code
<dependencies>
    <!-- Other dependencies -->
    
    <!-- Spring Data for Azure Cosmos DB -->
    <dependency>
        <groupId>com.azure</groupId>
        <artifactId>azure-spring-data-cosmos</artifactId>
        <version>4.0.0</version> <!-- Use the latest version available -->
    </dependency>
    
    <!-- For Azure identity -->
    <dependency>
        <groupId>com.azure</groupId>
        <artifactId>azure-identity</artifactId>
        <version>1.4.4</version>
    </dependency>
</dependencies>
Step 3: Configure Application Properties
In your src/main/resources/application.properties, add the necessary configuration to connect to your Cosmos DB:

properties
Copy code
azure.cosmos.endpoint=<your-cosmosdb-endpoint>
azure.cosmos.key=<your-cosmosdb-primary-key>
azure.cosmos.database=your-database-name
azure.cosmos.populate-query-metrics=true
azure.cosmos.consistency-level=SESSION
azure.cosmos.connection-mode=GATEWAY
Replace <your-cosmosdb-endpoint>, <your-cosmosdb-primary-key>, and your-database-name with your actual Cosmos DB credentials.

Step 4: Define Your Entity
Create an entity class that will be stored in Cosmos DB. This class should map to the data structure in your Cosmos DB collection.

java
Copy code
package com.example.cosmosdbdemo.model;

import com.azure.spring.data.cosmos.core.mapping.Container;
import com.azure.spring.data.cosmos.core.mapping.PartitionKey;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Id;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Container(containerName = "your-container-name")
public class User {

    @Id
    private String id;

    @PartitionKey
    private String partitionKey;

    private String firstName;
    private String lastName;
    private String email;
}
Step 5: Create a Repository
Now, create a repository interface that will allow you to perform CRUD operations on your Cosmos DB container.

java
Copy code
package com.example.cosmosdbdemo.repository;

import com.example.cosmosdbdemo.model.User;
import com.azure.spring.data.cosmos.repository.CosmosRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends CosmosRepository<User, String> {
}
Step 6: Create a Service Class
Create a service class to handle business logic, such as saving a user to Cosmos DB.

java
Copy code
package com.example.cosmosdbdemo.service;

import com.example.cosmosdbdemo.model.User;
import com.example.cosmosdbdemo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public User saveUser(User user) {
        return userRepository.save(user);
    }
}
Step 7: Create a Controller
Finally, create a controller to handle HTTP requests and use the service to save data to Cosmos DB.

java
Copy code
package com.example.cosmosdbdemo.controller;

import com.example.cosmosdbdemo.model.User;
import com.example.cosmosdbdemo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userService.saveUser(user);
    }
}
Step 8: Run the Application
You can now run your Spring Boot application by executing the main method in the CosmosdbDemoApplication class (generated by Spring Initializr).

Example cURL Request
To test the endpoint and write data to Cosmos DB, you can use the following cURL command:

bash
Copy code
curl -X POST http://localhost:8080/users \
     -H "Content-Type: application/json" \
     -d '{
           "id": "1",
           "partitionKey": "partition1",
           "firstName": "John",
           "lastName": "Doe",
           "email": "john.doe@example.com"
         }'
This will save the user data in the Cosmos DB container under the specified partition key.

Summary
This guide provides a basic setup to connect a Spring Boot application to Azure Cosmos DB, create an entity, and write data to a specific partition key. You can extend this project with more features like querying, updating, and deleting data as per your requirements.






