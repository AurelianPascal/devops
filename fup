package com.example.util;

import com.azure.cosmos.CosmosClient;
import com.azure.cosmos.CosmosContainer;
import com.azure.cosmos.CosmosDatabase;
import com.azure.cosmos.CosmosException;
import com.azure.cosmos.models.CosmosContainerProperties;
import com.azure.cosmos.models.CosmosItemResponse;
import com.azure.cosmos.models.PartitionKey;
import com.azure.cosmos.models.ThroughputProperties;
import com.example.generated.FullMessage;
import com.example.generated.Header;
import com.example.generated.ParentId;
import com.example.generated.Payload;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.protobuf.util.JsonFormat;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class CosmosDbUtilTest {

    private CosmosDbUtil cosmosDbUtil;
    private CosmosClient mockCosmosClient;
    private CosmosDatabase mockDatabase;
    private CosmosContainer mockContainer;
    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() {
        // Create mock instances
        mockCosmosClient = mock(CosmosClient.class);
        mockDatabase = mock(CosmosDatabase.class);
        mockContainer = mock(CosmosContainer.class);

        // Mock Cosmos client methods
        when(mockCosmosClient.getDatabase(any(String.class))).thenReturn(mockDatabase);
        when(mockDatabase.getContainer(any(String.class))).thenReturn(mockContainer);

        // Initialize CosmosDbUtil with the mock client
        cosmosDbUtil = new CosmosDbUtil(mockCosmosClient, "TestDatabase");

        // Initialize Jackson ObjectMapper for JSON comparison
        objectMapper = new ObjectMapper();
    }

    @Test
    void testSaveProtoMessage() throws Exception {
        // Create a Header instance
        Header header = Header.newBuilder()
                .setKey("test-key")
                .setDataType("TestType")
                .setLabel("Test Label")
                .build();

        // Create a Payload instance
        Payload payload = Payload.newBuilder()
                .setJson("{\"field\":\"value\"}")
                .build();

        // Create a FullMessage instance
        FullMessage fullMessage = FullMessage.newBuilder()
                .setId("test-id")
                .setHeader(header)
                .setTs(System.currentTimeMillis())
                .addDuplicates("duplicate-1")
                .setPayload(payload)
                .addParentIds(ParentId.newBuilder()
                        .setId("parent-id")
                        .setDataType("ParentType")
                        .setLabel("Parent Label")
                        .setKey("parent-key")
                        .build())
                .build();

        // Mock CosmosItemResponse
        CosmosItemResponse<Map<String, Object>> mockResponse = mock(CosmosItemResponse.class);
        when(mockResponse.getStatusCode()).thenReturn(201);

        // Mock container behavior
        when(mockContainer.createItem(any(Map.class), any(PartitionKey.class), isNull()))
                .thenReturn(mockResponse);

        // Call method
        CosmosItemResponse<Map<String, Object>> response = cosmosDbUtil.saveProtoMessage(fullMessage);

        // Verify interactions and assertions
        ArgumentCaptor<Map<String, Object>> documentCap
