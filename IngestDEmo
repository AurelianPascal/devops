To update the CosmosDBUtil class and related configurations to use the latest version of the azure-spring-boot-starter-cosmos (version 5.10.0), we need to make some changes to the dependencies and code. The newer versions of Azure Spring Data Cosmos provide better integration and support for Spring Boot 3.x, improved configuration management, and new features.

Updated pom.xml with Azure Spring Boot Starter Cosmos 5.10.0
First, let's update the pom.xml to use the new version of azure-spring-boot-starter-cosmos:

xml
Copy code
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>cosmosdb-util</artifactId>
    <version>1.0-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <java.version>17</java.version>
        <azure.cosmos.version>5.10.0</azure.cosmos.version>
        <spring-cloud.version>2022.0.3</spring-cloud.version>
        <junit.jupiter.version>5.8.2</junit.jupiter.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Azure Spring Boot Starter for Cosmos DB -->
        <dependency>
            <groupId>com.azure.spring</groupId>
            <artifactId>azure-spring-boot-starter-cosmos</artifactId>
            <version>${azure.cosmos.version}</version>
        </dependency>

        <!-- Spring Boot Starter Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Mockito for Mocking in Tests -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>4.0.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Spring Boot Test Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>
Updated Spring Configuration and CosmosDBUtil
With version 5.10.0, some aspects of configuration and how the Cosmos DB client is managed might be different. Below are the updated classes considering the new starter version.

Updated Spring Configuration Class
java
Copy code
package com.example.demo.config;

import com.azure.cosmos.CosmosClientBuilder;
import com.azure.cosmos.CosmosClient;
import com.azure.spring.data.cosmos.CosmosFactory;
import com.azure.spring.data.cosmos.config.CosmosConfig;
import com.azure.spring.data.cosmos.config.CosmosProperties;
import com.azure.spring.data.cosmos.core.CosmosTemplate;
import com.azure.spring.data.cosmos.repository.config.EnableCosmosRepositories;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Sort;

@Configuration
@EnableCosmosRepositories(basePackages = "com.example.demo.repository")
public class CosmosConfig {

    @Value("${azure.cosmos.uri}")
    private String uri;

    @Value("${azure.cosmos.key}")
    private String key;

    @Value("${azure.cosmos.database}")
    private String database;

    @Value("${azure.cosmos.consistency-level}")
    private String consistencyLevel;

    @Bean
    public CosmosClient cosmosClient() {
        return new CosmosClientBuilder()
                .endpoint(uri)
                .key(key)
                .consistencyLevel(com.azure.cosmos.ConsistencyLevel.valueOf(consistencyLevel.toUpperCase()))
                .buildClient();
    }

    @Bean
    public CosmosTemplate cosmosTemplate(CosmosClient cosmosClient) {
        CosmosFactory cosmosFactory = new CosmosFactory(cosmosClient, database);
        CosmosConfig cosmosConfig = CosmosConfig.builder()
                .responseDiagnosticsProcessor(responseDiagnostics -> System.out.println(responseDiagnostics))
                .build();
        return new CosmosTemplate(cosmosFactory, cosmosConfig);
    }
}
Updated CosmosDBUtil Class
java
Copy code
package com.example.demo.util;

import com.azure.cosmos.CosmosContainer;
import com.azure.cosmos.CosmosException;
import com.azure.cosmos.models.CosmosItemRequestOptions;
import com.azure.cosmos.models.CosmosItemResponse;
import com.azure.cosmos.models.PartitionKey;
import com.azure.spring.data.cosmos.core.CosmosTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class CosmosDBUtil<T> {

    private static final Logger logger = LoggerFactory.getLogger(CosmosDBUtil.class);

    private final CosmosTemplate cosmosTemplate;

    @Value("${azure.cosmos.database}")
    private String databaseName;

    public CosmosDBUtil(CosmosTemplate cosmosTemplate) {
        this.cosmosTemplate = cosmosTemplate;
    }

    /**
     * Save a single document to the specified Cosmos DB container.
     */
    public CosmosItemResponse<T> saveDocument(String containerName, String partitionKey, T document) {
        try {
            CosmosContainer container = cosmosTemplate.getCosmosFactory().getCosmosClient()
                    .getDatabase(databaseName).getContainer(containerName);
            return container.createItem(document, new PartitionKey(partitionKey), new CosmosItemRequestOptions());
        } catch (CosmosException e) {
            logger.error("Failed to save document to Cosmos DB: {}", e.getMessage());
            throw e;
        }
    }

    /**
     * Save a list of documents to the specified Cosmos DB container.
     */
    public void saveDocumentsInBatch(String containerName, String partitionKey, List<T> documents) {
        CosmosContainer container = cosmosTemplate.getCosmosFactory().getCosmosClient()
                .getDatabase(databaseName).getContainer(containerName);
        for (T document : documents) {
            try {
                container.createItem(document, new PartitionKey(partitionKey), new CosmosItemRequestOptions());
                logger.info("Document saved successfully to Cosmos DB.");
            } catch (CosmosException e) {
                logger.error("Failed to save document to Cosmos DB: {}", e.getMessage());
            }
        }
    }
}
Explanation of Changes
Dependencies Update:

We updated the dependency for azure-spring-boot-starter-cosmos to version 5.10.0 in the pom.xml.
Configuration Class (CosmosConfig):

This configuration class now includes beans for CosmosClient and CosmosTemplate.
CosmosTemplate is a Spring abstraction that makes it easier to interact with Cosmos DB.
The CosmosConfig now uses Spring's built-in diagnostics processing for debugging and performance tracking.
CosmosDBUtil Class:

The class uses the CosmosTemplate bean to interact with Cosmos DB.
The method saveDocument directly interacts with CosmosContainer obtained from CosmosTemplate.
The `save




You said:
add unit testing for all methods I need as much code coverage as possible
ChatGPT said:
ChatGPT
To achieve high code coverage for the CosmosDBUtil class and its methods, we will write unit tests using JUnit and Mockito. These tests will cover the main functionalities such as saving documents, handling exceptions, and processing batch saves. The tests will simulate different scenarios, including successful operations and failure handling.

Prerequisites for Testing
Ensure you have the necessary dependencies in your pom.xml for testing:

xml
Copy code
<dependencies>
    <!-- JUnit 5 for unit testing -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.8.2</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.8.2</version>
        <scope>test</scope>
    </dependency>

    <!-- Mockito for mocking dependencies -->
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>4.0.0</version>
        <scope>test</scope>
    </dependency>

    <!-- Spring Boot Starter Test -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
        <exclusions>
            <exclusion>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
</dependencies>
Unit Tests for CosmosDBUtil
We will create a test class CosmosDBUtilTest to cover the methods in the CosmosDBUtil class. This will include tests for saving a single document, saving multiple documents in batch, and handling exceptions.

java
Copy code
package com.example.demo.util;

import com.azure.cosmos.CosmosClient;
import com.azure.cosmos.CosmosContainer;
import com.azure.cosmos.models.CosmosItemRequestOptions;
import com.azure.cosmos.models.CosmosItemResponse;
import com.azure.cosmos.models.PartitionKey;
import com.azure.spring.data.cosmos.core.CosmosTemplate;
import com.example.demo.model.TestDocument;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

class CosmosDBUtilTest {

    @Mock
    private CosmosTemplate cosmosTemplate;

    @Mock
    private CosmosClient cosmosClient;

    @Mock
    private CosmosContainer cosmosContainer;

    @InjectMocks
    private CosmosDBUtil<TestDocument> cosmosDBUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(cosmosTemplate.getCosmosFactory().getCosmosClient()).thenReturn(cosmosClient);
        when(cosmosClient.getDatabase(anyString()).getContainer(anyString())).thenReturn(cosmosContainer);
    }

    @Test
    void testSaveDocument() {
        // Given
        String containerName = "TestContainer";
        String partitionKey = "TestPartition";
        TestDocument document = new TestDocument("1", "test data");

        CosmosItemResponse<TestDocument> mockResponse = mock(CosmosItemResponse.class);
        when(cosmosContainer.createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class)))
                .thenReturn(mockResponse);

        // When
        CosmosItemResponse<TestDocument> response = cosmosDBUtil.saveDocument(containerName, partitionKey, document);

        // Then
        assertNotNull(response);
        verify(cosmosContainer, times(1))
                .createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class));
    }

    @Test
    void testSaveDocumentExceptionHandling() {
        // Given
        String containerName = "TestContainer";
        String partitionKey = "TestPartition";
        TestDocument document = new TestDocument("1", "test data");

        when(cosmosContainer.createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class)))
                .thenThrow(new RuntimeException("Simulated failure"));

        // When & Then
        assertThrows(RuntimeException.class, () -> {
            cosmosDBUtil.saveDocument(containerName, partitionKey, document);
        });

        verify(cosmosContainer, times(1))
                .createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class));
    }

    @Test
    void testSaveDocumentsInBatch() {
        // Given
        String containerName = "TestContainer";
        String partitionKey = "TestPartition";
        List<TestDocument> documents = Arrays.asList(
                new TestDocument("1", "test data 1"),
                new TestDocument("2", "test data 2")
        );

        CosmosItemResponse<TestDocument> mockResponse = mock(CosmosItemResponse.class);
        when(cosmosContainer.createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class)))
                .thenReturn(mockResponse);

        // When
        cosmosDBUtil.saveDocumentsInBatch(containerName, partitionKey, documents);

        // Then
        verify(cosmosContainer, times(2))
                .createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class));
    }

    @Test
    void testSaveDocumentsInBatchWithFailures() {
        // Given
        String containerName = "TestContainer";
        String partitionKey = "TestPartition";
        List<TestDocument> documents = Arrays.asList(
                new TestDocument("1", "test data 1"),
                new TestDocument("2", "test data 2")
        );

        when(cosmosContainer.createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class)))
                .thenThrow(new RuntimeException("Simulated failure"));

        // When
        cosmosDBUtil.saveDocumentsInBatch(containerName, partitionKey, documents);

        // Then
        verify(cosmosContainer, times(2))
                .createItem(any(), any(PartitionKey.class), any(CosmosItemRequestOptions.class));
    }
}

// A simple test document class for testing purposes
class TestDocument {
    private String id;
    private String data;

    public TestDocument(String id, String data) {
        this.id = id;
        this.data = data;
    }

    // Getters and setters...

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }
}
Explanation of Test Cases
testSaveDocument:

This test verifies that a single document can be saved to the specified Cosmos DB container without any issues. It mocks the CosmosContainer.createItem method to return a mocked response.
testSaveDocumentExceptionHandling:

This test checks the exception handling capability of the saveDocument method. It simulates a failure scenario by throwing a RuntimeException and verifies that the exception is properly handled.
testSaveDocumentsInBatch:

This test checks the functionality of saving multiple documents in a batch. It verifies that the createItem method is called the correct number of times (once for each document).
testSaveDocumentsInBatchWithFailures:

This test simulates a scenario where all batch save operations fail. It ensures that even in the case of failures, the method attempts to process each document and logs the failure.
Running Tests
To run these tests, you can use your IDE’s built-in test runner or run the following Maven command:

bash
Copy code
mvn test
Conclusion
High Code Coverage: These tests cover various scenarios, including successful saves, batch processing, and exception handling, ensuring high code coverage.
Mocking Dependencies: By using Mockito, we simulate the behavior of Cosmos DB operations, allowing us to test the logic of CosmosDBUtil without requiring a live Cosmos DB instance.
Error Handling: The tests ensure that errors are handled gracefully, which is crucial for robustness and reliability in production environments.
These unit tests, combined with integration tests using the Cosmos DB Emulator or a real Azure Cosmos DB instance, provide a comprehensive testing approach to ensure the correctness and resilience of the application.
